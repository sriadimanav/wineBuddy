/* eslint-disable */
// @ts-nocheck
// noinspection JSUnusedGlobalSymbols
// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.
import { Route as rootRouteImport } from './routes/__root';
import { Route as AuthRouteImport } from './routes/auth';
import { Route as FaqRouteImport } from './routes/faq';
import { Route as FavoritesRouteImport } from './routes/favorites';
import { Route as IndexRouteImport } from './routes/index';
import { Route as OnboardingRouteImport } from './routes/onboarding';
import { Route as ProfileRouteImport } from './routes/profile';
import { Route as ScanRouteImport } from './routes/scan';
import { Route as WineIdRouteImport } from './routes/wine/$id';

const ScanRoute = ScanRouteImport.update({
  id: '/scan',
  path: '/scan',
  getParentRoute: () => rootRouteImport,
} as any);
const ProfileRoute = ProfileRouteImport.update({
  id: '/profile',
  path: '/profile',
  getParentRoute: () => rootRouteImport,
} as any);
const OnboardingRoute = OnboardingRouteImport.update({
  id: '/onboarding',
  path: '/onboarding',
  getParentRoute: () => rootRouteImport,
} as any);
const FavoritesRoute = FavoritesRouteImport.update({
  id: '/favorites',
  path: '/favorites',
  getParentRoute: () => rootRouteImport,
} as any);
const FaqRoute = FaqRouteImport.update({
  id: '/faq',
  path: '/faq',
  getParentRoute: () => rootRouteImport,
} as any);
const AuthRoute = AuthRouteImport.update({
  id: '/auth',
  path: '/auth',
  getParentRoute: () => rootRouteImport,
} as any);
const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any);
const WineIdRoute = WineIdRouteImport.update({
  id: '/wine/$id',
  path: '/wine/$id',
  getParentRoute: () => rootRouteImport,
} as any);

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute;
  '/auth': typeof AuthRoute;
  '/faq': typeof FaqRoute;
  '/favorites': typeof FavoritesRoute;
  '/onboarding': typeof OnboardingRoute;
  '/profile': typeof ProfileRoute;
  '/scan': typeof ScanRoute;
  '/wine/$id': typeof WineIdRoute;
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute;
  '/auth': typeof AuthRoute;
  '/faq': typeof FaqRoute;
  '/favorites': typeof FavoritesRoute;
  '/onboarding': typeof OnboardingRoute;
  '/profile': typeof ProfileRoute;
  '/scan': typeof ScanRoute;
  '/wine/$id': typeof WineIdRoute;
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport;
  '/': typeof IndexRoute;
  '/auth': typeof AuthRoute;
  '/faq': typeof FaqRoute;
  '/favorites': typeof FavoritesRoute;
  '/onboarding': typeof OnboardingRoute;
  '/profile': typeof ProfileRoute;
  '/scan': typeof ScanRoute;
  '/wine/$id': typeof WineIdRoute;
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath;
  fullPaths:
    | '/'
    | '/auth'
    | '/faq'
    | '/favorites'
    | '/onboarding'
    | '/profile'
    | '/scan'
    | '/wine/$id';
  fileRoutesByTo: FileRoutesByTo;
  to: '/' | '/auth' | '/faq' | '/favorites' | '/onboarding' | '/profile' | '/scan' | '/wine/$id';
  id:
    | '__root__'
    | '/'
    | '/auth'
    | '/faq'
    | '/favorites'
    | '/onboarding'
    | '/profile'
    | '/scan'
    | '/wine/$id';
  fileRoutesById: FileRoutesById;
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute;
  AuthRoute: typeof AuthRoute;
  FaqRoute: typeof FaqRoute;
  FavoritesRoute: typeof FavoritesRoute;
  OnboardingRoute: typeof OnboardingRoute;
  ProfileRoute: typeof ProfileRoute;
  ScanRoute: typeof ScanRoute;
  WineIdRoute: typeof WineIdRoute;
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/scan': {
      id: '/scan';
      path: '/scan';
      fullPath: '/scan';
      preLoaderRoute: typeof ScanRouteImport;
      parentRoute: typeof rootRouteImport;
    };
    '/profile': {
      id: '/profile';
      path: '/profile';
      fullPath: '/profile';
      preLoaderRoute: typeof ProfileRouteImport;
      parentRoute: typeof rootRouteImport;
    };
    '/onboarding': {
      id: '/onboarding';
      path: '/onboarding';
      fullPath: '/onboarding';
      preLoaderRoute: typeof OnboardingRouteImport;
      parentRoute: typeof rootRouteImport;
    };
    '/favorites': {
      id: '/favorites';
      path: '/favorites';
      fullPath: '/favorites';
      preLoaderRoute: typeof FavoritesRouteImport;
      parentRoute: typeof rootRouteImport;
    };
    '/faq': {
      id: '/faq';
      path: '/faq';
      fullPath: '/faq';
      preLoaderRoute: typeof FaqRouteImport;
      parentRoute: typeof rootRouteImport;
    };
    '/auth': {
      id: '/auth';
      path: '/auth';
      fullPath: '/auth';
      preLoaderRoute: typeof AuthRouteImport;
      parentRoute: typeof rootRouteImport;
    };
    '/': {
      id: '/';
      path: '/';
      fullPath: '/';
      preLoaderRoute: typeof IndexRouteImport;
      parentRoute: typeof rootRouteImport;
    };
    '/wine/$id': {
      id: '/wine/$id';
      path: '/wine/$id';
      fullPath: '/wine/$id';
      preLoaderRoute: typeof WineIdRouteImport;
      parentRoute: typeof rootRouteImport;
    };
  }
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  AuthRoute: AuthRoute,
  FaqRoute: FaqRoute,
  FavoritesRoute: FavoritesRoute,
  OnboardingRoute: OnboardingRoute,
  ProfileRoute: ProfileRoute,
  ScanRoute: ScanRoute,
  WineIdRoute: WineIdRoute,
};
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>();
